@model OverviewModel
@{ 
    ViewBag.Title = "Summary";
}
@section scripts {
    <script src="~/lib/chartjs/dist/Chart.bundle.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            console.log("test js");
            //pie chart
            var pieCtx = document.getElementById("piechart").getContext("2d");
            var pieChart = new Chart(pieCtx, {
                type: 'pie',
                
                options: {
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                //get the concerned dataset
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                //calculate the total of this data set
                                var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {
                                    return previousValue + currentValue;
                                });
                                //get the current items value
                                var currentValue = dataset.data[tooltipItem.index];
                                //calculate the precentage based on the total and current item, also this does a rough rounding to give a whole number
                                var precentage = Math.floor(((currentValue / total) * 100) + 0.5);

                                return precentage + "%";
                            }
                        }
                    } 

                }
            });


            //bar chart
            var barCtx = document.getElementById("barchart").getContext("2d");
            var color = Chart.helpers.color;
            var barChart = new Chart(barCtx, {
                type: 'bar',
                data: {
                    
                },
                options: {
                    responsive: true,
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true
                    },
                    hover: {
                        animationDuration: 0
                    },
                    animation: {
                        duration: 1,
                        onComplete: function () {
                            var chartInstance = this.chart,
                                ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';

                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i);
                                meta.data.forEach(function (bar, index) {
                                    if (dataset.data[index] > 0) {
                                        var data = "$" + dataset.data[index];
                                        ctx.fillText(data, bar._model.x, bar._model.y - 5);

                                    }
                                    
                                });
                            });
                        }
                    }
                }
            });
            //variable declaration
            let currUser = '@Model.Username';
            function getPieChartData(timeSelection) {
                var url = "/api/overview/" + currUser + "/" + timeSelection;
                //request data
                $.getJSON(url, function (data) {
                    let chartData = {
                        labels: [],
                        datasets: [{
                            backgroundColor: [],
                            data: []
                        }]
                    };
                    Object.keys(data.expenseProportion).forEach((key, index) => {
                        console.log("Index:" + index + "key: " + key + " value: " + data.expenseProportion[key]);
                        chartData.labels.push(key);
                        chartData.datasets[0].backgroundColor.push(getColor(index));
                        chartData.datasets[0].data.push(data.expenseProportion[key]);

                    });
                    pieChart.data = chartData;
                    pieChart.update();
                    console.log(chartData);
                });

            };
            function getColor(index) {
                let colors = ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"];
                if (0 <= index && index <= colors.length - 1) {
                    return colors[index]
                } else {
                    return colors[colors.length - 1];
                }

            };

            //API
            
            
            $('#time-selection').change(function (e) {
                let timeSelection = $(this).val();
                getPieChartData(timeSelection);
            });
            //request data for pie chart
            getPieChartData(14);
            //request data for bar chart
            $.getJSON('/api/overview/' + currUser, function (data) {
                console.log(data);
                let chartData = {
                    labels: [],
                    datasets: [{
                        label: 'Income',
                        backgroundColor: "rgba(255, 99, 132, 0.2)",
                        borderColor: "rgb(255, 99, 132)",
                        borderWidth: 1,
                        fill: false,
                        data: []
                    }, {
                        label: 'Expense',
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        borderColor: "rgba(75, 192, 192)",
                        borderWidth: 1,
                        data: []
                    }]
                };
                for (let i = 0; i < 3; i++) {
                    chartData.labels.push(data.months[i]);
                    chartData.datasets[0].data.push(data.expenses[i]);
                    chartData.datasets[1].data.push(data.incomes[i]);

                }
                barChart.data = chartData;
                barChart.update();
            });
        });
       
    </script>

}

    <div class="row m-1 p-1">


        <div class="col-6">
            <div class="card">
                <h5 class="card-header">
                    Recent expenses
                </h5>
                <div class="card-body">
                    <table class="table table-sm table-bordered">
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Date</th>
                            <th>Category</th>
                            <th>Amount</th>
                        </tr>
                        @if (Model.Expense.Count() == 0)
                    {
                        <tr><td colspan="5" class="text-center">No expenses</td></tr>
                }
                else
                {
                    foreach (Expense e in Model.Expense)
                    {
                        <tr>
                            <td>@e.ExpenseId</td>
                            <td>@e.Description</td>
                            <td>@e.Date</td>
                            <td>@e.Category.Name</td>
                            <td>@e.Amount.ToString("c")</td>
                        </tr>
                }
            }
                    </table>
                </div>

            </div>
        </div>
        <div class="col-6 mt-1">
            <div class="card">
                <h5 class="card-header">
                    Last 3 months
                </h5>
                <div class="card-body">
                    <canvas id="barchart"></canvas>
                </div>

            </div>
        </div>
        <div class="col-6 mt-1">
            <div class="card">
                <h5 class="card-header">
                    Proportion of expenses
                </h5>
                <div class="card-body">
                    <canvas id="piechart"></canvas>
                </div>

            </div>
        </div>

        <div class="col-6 mt-1">
            <div class="card">
                <div class="card-header">

                    <h5>Financial summary</h5>

                    <div class="form-group float-right">
                        <select id="time-selection" class="form-control-sm">
                            <option value="7">Weekly</option>
                            <option selected value="14">Fortnightly</option>
                            <option value="18">Monthly</option>
                        </select>
                    </div>
                </div>

                <div class="card-body">
                    <div class="m-2">
                        <strong>Total expense:</strong> @Model.TotalExpense.ToString("c")
                    </div>
                    <div class="m-2">
                        <strong>Total income:</strong> @Model.TotalIncome.ToString("c")
                    </div>
                </div>

            </div>
        </div>
    </div>
